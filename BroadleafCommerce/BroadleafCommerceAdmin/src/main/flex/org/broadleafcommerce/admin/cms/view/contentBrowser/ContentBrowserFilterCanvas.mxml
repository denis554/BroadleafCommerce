<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
	<mx:Script>
		<![CDATA[
			import org.broadleafcommerce.admin.cms.model.ContentModelLocator;
			import org.broadleafcommerce.admin.cms.model.ContentModel;

			private var contentModel:ContentModel = ContentModelLocator.getInstance().contentModel;
			private var filterTextInputLastChangedDate:Date;

			private function handleFilterChange():void{
//				var now:Date = new Date();
//				var filterText:String = StringUtil.trim(this.filterTextInput.text);
//				this.offerModel.offersListFiltered.removeAll();
//				if(this.notStartedCheckBox.selected && filterText == ""){
//					for each(var offerFilteredByNotStarted:Offer in this.offerModel.offersList){
//						if(offerFilteredByNotStarted.startDate > now){
//							this.offerModel.offersListFiltered.addItem(offerFilteredByNotStarted);
//						}
//					}
//				}else if(this.completeCheckBox.selected && filterText == ""){
//					for each(var offerFilteredByCompleted:Offer in this.offerModel.offersList){
//						if(offerFilteredByCompleted.endDate < now){
//							this.offerModel.offersListFiltered.addItem(offerFilteredByCompleted);
//						}
//					}
//				}else if(this.inProgressCheckBox.selected && filterText == ""){
//					for each(var offerFilteredByInProgress:Offer in this.offerModel.offersList){
//						if(offerFilteredByInProgress.startDate < now && offerFilteredByInProgress.endDate > now){
//							this.offerModel.offersListFiltered.addItem(offerFilteredByInProgress);
//						}
//					}
//				}else if(!this.notStartedCheckBox.selected && !this.inProgressCheckBox.selected && !this.completeCheckBox.selected  && filterText == ""){
//					for each(var offerNotFilteredByDateOrName:Offer in this.offerModel.offersList){
//						this.offerModel.offersListFiltered.addItem(offerNotFilteredByDateOrName);
//					}
//				}else if(this.notStartedCheckBox.selected && filterText != ""){
//					for each(var offerFilteredByNotStartedAndName:Offer in this.offerModel.offersList){
//						if(offerFilteredByNotStartedAndName.startDate > now && offerFilteredByNotStartedAndName.name.match(filterText)){
//							this.offerModel.offersListFiltered.addItem(offerFilteredByNotStartedAndName);
//						}
//					}
//				}else if(this.completeCheckBox.selected && filterText != ""){
//					for each(var offerFilteredByCompletedAndName:Offer in this.offerModel.offersList){
//						if(offerFilteredByCompletedAndName.endDate < now && offerFilteredByCompletedAndName.name.match(filterText)){
//							this.offerModel.offersListFiltered.addItem(offerFilteredByCompletedAndName);
//						}
//					}
//				}else if(this.inProgressCheckBox.selected && filterText != ""){
//					for each(var offerFilteredByInProgressAndName:Offer in this.offerModel.offersList){
//						if(offerFilteredByInProgressAndName.startDate < now && offerFilteredByInProgressAndName.endDate > now && offerFilteredByInProgressAndName.name.match(filterText)){
//							this.offerModel.offersListFiltered.addItem(offerFilteredByInProgressAndName);
//						}
//					}
//				}else if(!this.notStartedCheckBox.selected && !this.inProgressCheckBox.selected && !this.completeCheckBox.selected  && filterText != ""){
//					for each(var offerNotFilteredByDateOnlyName:Offer in this.offerModel.offersList){
//						if(offerNotFilteredByDateOnlyName.name.match(filterText)){
//							this.offerModel.offersListFiltered.addItem(offerNotFilteredByDateOnlyName);
//						}
//					}
//				}
			}

			// handler for the 'Deployed' filter
			private function handleDeployedCheckBoxChange():void{
				if(this.deployedCheckBox.selected){
					this.notDeployedCheckBox.enabled = false;
					this.allCheckBox.enabled = false;
				}else{
					this.notDeployedCheckBox.enabled = true;
					this.allCheckBox.enabled = true;
				}
				this.handleFilterChange();
			}

			// handler for the 'Not Deployed' filter
			private function handleNotDeployedCheckBoxChange():void{
				if(this.notDeployedCheckBox.selected){
					this.deployedCheckBox.enabled = false;
					this.allCheckBox.enabled = false;
				}else{
					this.deployedCheckBox.enabled = true;
					this.allCheckBox.enabled = true;
				}
				this.handleFilterChange();
			}

			// handler for the 'All' filter
			private function handleAllCheckBoxChange():void{
				if(this.allCheckBox.selected){
					this.deployedCheckBox.enabled = false;
					this.notDeployedCheckBox.enabled = false;
				}else{
					this.deployedCheckBox.enabled = true;
					this.notDeployedCheckBox.enabled = true;
				}
				this.handleFilterChange();
			}

			// handles a change in the filter for the offer name
			private function handleFilterTextInputChange():void{
				this.filterTextInputLastChangedDate = new Date();
				this.waitOnUserInput();
			}

			// waits a predetermined amount of time before calling the function that filters through the list of offers
			private function waitOnUserInput():void{
				var millisecondsToWait:Number = 200;
				if((this.filterTextInputLastChangedDate.getTime() + millisecondsToWait) < (new Date().getTime())){
					this.handleFilterChange();
				}else{
					// if the predetermined amount of time has not elapsed, call this function again until it does
					callLater(this.waitOnUserInput);
				}
			}
		]]>
	</mx:Script>
	<mx:Grid>
		<mx:GridRow verticalAlign="middle">
			<mx:GridItem horizontalAlign="right"
				verticalAlign="middle">
				<mx:Label id="filterByNameLabel"
					text="Filter By Name:"/>
			</mx:GridItem>
			<mx:GridItem verticalAlign="middle">
				<mx:TextInput id="filterTextInput"
					x="50"
					width="160"
					change="handleFilterTextInputChange()"/>
			</mx:GridItem>
			<mx:GridItem textAlign="right"
				verticalAlign="middle"
				paddingLeft="40">
					<mx:Label id="filterByDeployedLabel"
						text="Filter By Deployed:"/>
			</mx:GridItem>
			<mx:GridItem verticalAlign="middle">
				<mx:HBox horizontalGap="20"
					verticalAlign="middle">
					<mx:CheckBox id="deployedCheckBox"
						label="Deployed"
						labelPlacement="right"
						change="handleDeployedCheckBoxChange()"/>
					<mx:CheckBox id="notDeployedCheckBox"
						label="Not Deployed"
						labelPlacement="right"
						change="handleNotDeployedCheckBoxChange()"/>
					<mx:CheckBox id="allCheckBox"
						label="All"
						labelPlacement="right"
						change="handleAllCheckBoxChange()"/>
				</mx:HBox>
			</mx:GridItem>
		</mx:GridRow>
	</mx:Grid>
</mx:Canvas>
