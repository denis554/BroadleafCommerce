= Quick-Start Guide =

This quick-start guide is intended to give you the bare minimum information you will need to get up and running using the Broadleaf Commerce framework. It is split into two sections: Building and Running the Broadleaf Commerce Demo Application, and Preparing Your Custom Application to Run with Broadleaf Commerce.

== Running the Broadleaf Commerce Demo Application ==

Demo Application Prerequisites:
 * JDK 1.6 or greater
 * ~1G available RAM

Make sure you have the prerequisite items installed and confirm that each is in an operational state on your test machine.

Run the Demo and Admin Applications:
 * Download the "-with-dependencies" distribution of the Broadleaf Commerce framework (http://broadleafcommerce.org/download.html). This distribution contains libraries required to run the demo.
 * Unzip the Broadleaf Commerce distribution to a suitable directory
 * Execute the following command at the 'demo' directory of the Broadleaf Commerce distribution.
   * java -jar broadleaf-demo-launcher-[version].jar
   * Wait until you see the 'Started SelectChannelConnector@0.0.0.0:8080' message in the console before attempting to access the demo or admin in a browser.

At this point, you should be able to access the demo application using your favorite web browser. Open the site at http://localhost:8080/broadleafdemo.
You should also be able to access the admin application. Open the admin site at http://localhost:8080/broadleafdemo/admin.html. You can log onto the Admin Tool with the username 'admin' and password 'admin'.

Stop the Demo and Admin Applications:
  * Execute the following command at the 'demo' directory of the Broadleaf Commerce distribution.
    * java -jar broadleaf-demo-launcher-[version].jar stop

== Preparing Your Custom Application to Run with Broadleaf Commerce ==

We've prepared the following quick-start overview to help you out as you prepare your custom JEE module based on Broadleaf Commerce.

Prerequisites:
 * JDK 1.6 or greater

Dependencies:

Service Layer
Internal Dependencies:
 * broadleaf-framework.jar
 * broadleaf-profile.jar
 * broadleaf-open-admin-platform.jar
 
External Dependencies
 * %%service-dependencies%%

Web Layer
Internal Dependencies:
 * broadleaf-framework-web.jar
 * broadleaf-profile-web.jar
 
External Dependencies
 * %%web-dependencies%%

USPS Support
Internal Dependencies:
 * broadleaf-usps.jar
 * broadleaf-usps-schemas.jar
 
External Dependencies:
 * %%usps-dependencies%%
 
CyberSource Support
Internal Dependencies:
 * broadleaf-cybersource.jar
 * broadleaf-cybersource-api.jar
 
External Dependencies:
 * %%cybersource-dependencies%%
 
Demo Additional Dependencies:
 * %%demo-dependencies%%
 
Admin
Internal Dependencies:
 * broadleaf-framework.jar
 * broadleaf-profile.jar
 * broadleaf-profile-sources.jar
 * broadleaf-open-admin-platform.jar
 * broadleaf-open-admin-platform-sources.jar
 * broadleaf-admin-module.jar
 * broadleaf-admin-module-sources.jar
 
External Dependencies:
 * %%admin-dependencies%%

The following represents the general considerations that will need to be addressed to launch a custom application on top of Broadleaf Commerce:

 * We have made every effort to create a rich data model that should cover most, if not all, of our user's needs. However, should you encounter a situation where you need to extend/override the Broadleaf Commerce data model, you will need to refer to the Entity Extension Guide (http://www.broadleafcommerce.org/confluence/display/core/Extending+Entities).
 * Broadleaf Commerce is a Spring-based framework. Your application will need to use Spring as well to interact with Broadleaf Commerce. As a result, you will need to merge the Spring configuration for your application with that of Broadleaf Commerce. Thankfully, this is easy to do, but there are some guidelines. Refer to the Merge Configuration (http://www.broadleafcommerce.org/confluence/display/core/Merge+Configuration).
 * Broadleaf Commerce will also work with most modern database platforms for which a valid JDBC driver exists. We include ddl creation scripts for a handful of major database platforms in the sql directory of our distributions.
 * Broadleaf Commerce requires at least some minimal entity manager configuration to work with your database. Refer to the Persistence Configuration (http://www.broadleafcommerce.org/confluence/display/core/Persistence+Configuration).
 * Should you need to add custom configuration for you application based on environment (i.e. development, test, prod, etc...), Broadleaf Commerce provides an environment configuration facility. Refer to the Runtime Environment Configuration (http://www.broadleafcommerce.org/confluence/display/core/Runtime+Environment+Configuration).
 * Should you need to override / alter the behavior specified in a Broadleaf Commerce service, then refer to the Service Extension Guide (http://www.broadleafcommerce.org/confluence/display/core/Extending+Services).
 * Broadleaf Commerce provides highly-configurable workflows for both pricing and checkout. The default behavior of these workflows will fulfill many user's needs. However, if you wish to re-order workflows or add activities, refer to the Workflow Configuration (http://www.broadleafcommerce.org/confluence/display/core/Workflow+Configuration).
 * Broadleaf Commerce performs a number of key functions through the use of modules. For example, Pricing (including shipping, tax, etc...) and Payment (credit card, gift card, bank account, etc...) are all handled through the use of Broadleaf Commerce modules. Refer to the Module Guide (http://www.broadleafcommerce.org/confluence/display/core/Creating+Modules) for more information.
 * While not required, Broadleaf Commerce suggests that users implement the presentation layer of their applications using Spring MVC. Broadleaf Commerce includes a number of pre-built controllers and tag libraries that work with Spring MVC (our demo application was also built using Spring MVC). Refer to the Presentation Layer (http://www.broadleafcommerce.org/confluence/display/core/Presentation+Layer).
 