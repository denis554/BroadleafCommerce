<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * Copyright 2008-2009 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="org.broadleafcommerce.admin.cms.view.*"
	creationComplete="handleCreationComplete()"
	xmlns:control="org.broadleafcommerce.admin.cms.control.*"
	xmlns:contentSandbox="org.broadleafcommerce.admin.cms.view.contentSandbox.*">
	<mx:Script>
		<![CDATA[
			import org.broadleafcommerce.admin.cms.control.events.CreateEditContentEvent;
			import org.broadleafcommerce.admin.cms.control.events.ReadContentDetailsListByIdEvent;
			import org.broadleafcommerce.admin.cms.model.util.ContentUtil;
			import org.broadleafcommerce.admin.cms.control.events.AddContentTabEvent;
			import org.broadleafcommerce.admin.cms.view.contentCreation.ContentAddEditPage;
			import org.broadleafcommerce.admin.cms.control.events.ApproveContentEvent;
			import mx.controls.Alert;
			import org.broadleafcommerce.admin.cms.control.events.SubmitContentFromSandboxEvent;
			import mx.collections.ArrayCollection;
			import org.broadleafcommerce.admin.core.model.AppModelLocator;
			import org.broadleafcommerce.admin.core.model.AuthenticationModel;
			import org.broadleafcommerce.admin.cms.model.ContentModel;
			import org.broadleafcommerce.admin.cms.model.ContentModelLocator;
			import org.broadleafcommerce.admin.cms.control.events.ReadContentForSandboxEvent;
			import org.broadleafcommerce.admin.cms.vo.Content;
			import mx.managers.PopUpManager;
			import mx.containers.TitleWindow;

			[Bindable]
			private var authModel:AuthenticationModel = AppModelLocator.getInstance().authModel;

			[Bindable]
			private var contentModel:ContentModel = ContentModelLocator.getInstance().contentModel;

			[Bindable]
			public var content:ArrayCollection;

			[Bindable]
			public var sandboxName:String;

			private function handleCreationComplete():void{
				trace("DEBUG: ContentSandboxCanvas.handleCreationComplete()");
				if (content == null || sandboxName == null){
					Alert.show("Error: content and name for sandbox should not be null");
				}
			}

			private function handleAddClick(event:Event):void{
				//var newContentModal:TitleWindow = TitleWindow(PopUpManager.createPopUp(this, ContentAddEditModal , true));
			}

			private function handleEditClick(event:Event):void{
				var temp:Content = content.getItemAt(contentSandboxDataGrid.selectedIndex) as Content;

				if (ContentUtil.isContentTypePage(temp.contentType)){
					new CreateEditContentEvent(temp).dispatch();
				} else {
					Alert.show("Chose non page");
				}

			}

			private function handleSubmitClick(event:Event):void{
				var contentIds:ArrayCollection = retrieveSelectedContentIds();
				if (contentIds != null) {
					new SubmitContentFromSandboxEvent(contentIds, contentModel.currentSandbox, contentModel.currentSandbox).dispatch();
				}
			}

			private function handleApproveClick(event:Event):void{
				var contentIds:ArrayCollection = retrieveSelectedContentIds();
				Alert.show(contentIds.toString(), "Contentids");
				if (contentIds != null) {
					new ApproveContentEvent(contentIds, contentModel.currentSandbox, contentModel.currentSandbox).dispatch();
				}
			}

			private function retrieveSelectedContentIds():ArrayCollection{
				var selectedIndices:Array = this.contentSandboxDataGrid.selectedIndices;
				if (selectedIndices.length > 0) {
					var contentForSandbox:ArrayCollection = contentModel.contentForSandbox;
					var contentIds:ArrayCollection = new ArrayCollection();

					for(var i:Number = 0; i<selectedIndices.length; i++){
						var content:Content = contentForSandbox.getItemAt(selectedIndices[i]) as Content;
						contentIds.addItem(content.id);
					}
					return contentIds;
				} else {
					return null;
				}
			}
		]]>
	</mx:Script>

	<mx:Binding
		source="content"
		destination="contentSandboxDataGrid.dataProvider"/>

		<mx:Label text="Viewing Sandbox: {sandboxName}" fontSize="20"/>

		<mx:HBox>
			<mx:Button id="previewButton" label="Preview" click="//handlePreviewClick(event)" styleName="previewButton" />
			<mx:Button id="editButton" label="Edit" enabled="{contentSandboxDataGrid.selectedIndex > -1}" click="handleEditClick(event)" styleName="viewEditButton" />
			<mx:Button id="addButton" label="Add" styleName="addButton" click="handleAddClick(event)"/>
		</mx:HBox>
		<mx:HBox
			width="100%" height="100%">
			<contentSandbox:ContentSandboxDataGrid
				id="contentSandboxDataGrid" height="100%" width="100%"/>
		</mx:HBox>
		<mx:HBox>
			<!-- If role == CONTENT_APPROVER -->
			<mx:Button id="approveButton" label="Approve" click="handleApproveClick(event)"/>

			<!-- If role == CONTENT_EDITOR -->
			<mx:Button id="submitButton" label="Submit" click="handleSubmitClick(event)"/>

			<!-- If role == CONTENT_DELETER -->
			<mx:Button id="deleteButton" label="Delete"/>
		</mx:HBox>

</mx:VBox>
