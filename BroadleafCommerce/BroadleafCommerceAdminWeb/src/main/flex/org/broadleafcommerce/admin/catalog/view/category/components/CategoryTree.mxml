<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:mx="http://www.adobe.com/2006/mxml" 
		labelField="name"
		iconFunction="determineIcon"
		dragEnabled="true"
		dropEnabled="true" 
		dragComplete="handleDragComplete(event)"
		dragDrop="handleDragDrop(event)"
		itemClick="handleItemClick(event)"
		dragStart="handleDragStart(event)"
		>
		<mx:Script>
			<![CDATA[
				import mx.controls.Alert;
				import mx.utils.ObjectUtil;
				import mx.collections.ArrayCollection;
				import org.broadleafcommerce.admin.catalog.control.events.category.CopyCategoryEvent;
				import mx.managers.DragManager;
				import org.broadleafcommerce.admin.catalog.control.events.category.MoveCategoryEvent;
				import org.broadleafcommerce.admin.catalog.model.CategoryTreeItem;
				import org.broadleafcommerce.admin.catalog.control.events.category.EditCategoryEvent;
				import mx.events.ListEvent;
				import mx.events.DragEvent;
				import org.broadleafcommerce.admin.catalog.vo.category.Category; 

            public var previousSelectedItem:Object;

				
			[Bindable]
            [Embed("/assets/images/3D-Documents.png")]
            private var categoryHasIcon:Class;

            [Bindable]
            [Embed("/assets/images/Blank.png")]
            private var categoryHasNotIcon:Class;
            
            private function isBranch(item:Object):Boolean{
            	return (item && item.hasOwnProperty("children") && item.children.length > 0);
            }
            
			private function determineIcon(item:Object):Class{
				var iconClass:Class;
					if(isBranch(item)){
						iconClass = categoryHasIcon;
					}else{
						iconClass = categoryHasNotIcon;
					}
                return iconClass;				
			}			
			
			private function handleDragStart(event:DragEvent):void{
				super.dragStartHandler(event);
				event.draggedItem = selectedItem;
				var e:DragEvent = event;
			}
			
			private function handleDragComplete(event:DragEvent):void{
				super.dragCompleteHandler(event);
			}
			
			private function handleDragDrop(event:DragEvent):void{
				try{						
					var items:Array = event.dragSource.dataForFormat("treeItems") as Array;					
					var draggedItem:CategoryTreeItem = CategoryTreeItem(items[0]);
					var index:int = this.calculateDropIndex(event);
					var newParent:CategoryTreeItem;
					if(isItemOpen(this.indexToItemRenderer(index-1).data)){
						var x:Object = this.indexToItemRenderer(index-1);
						newParent = (this.indexToItemRenderer(index-1).data as CategoryTreeItem);					
					}else{					
						newParent = (this.getParentItem(this.indexToItemRenderer(index-1).data) as CategoryTreeItem);										
					}
					var oldParent:CategoryTreeItem = (getParentItem(draggedItem) as CategoryTreeItem);
					if(draggedItem.catId == newParent.catId){
						event.preventDefault();
						Alert.show("Can not drag a Category onto itself");
						this.hideDropFeedback(event);					
						return;
					}
					for each(var catTreeItem:CategoryTreeItem in newParent.children){
						if(catTreeItem.catId == draggedItem.catId){
							event.preventDefault();
							Alert.show("Dragged Category already exists in "+newParent.name);
							this.hideDropFeedback(event);							
							return; 							
						}
					}
					
					super.dragDropHandler(event);
					if(event.action == DragManager.COPY){
						var cce:CopyCategoryEvent = new CopyCategoryEvent(Category(draggedItem.category), Category(newParent.category));
						cce.dispatch();	
					}else{
						var mce:MoveCategoryEvent = new MoveCategoryEvent(Category(draggedItem.category), Category(oldParent.category), Category(newParent.category));
						mce.dispatch();
					}				
			   }catch (error:Error){
					Alert.show("Could not complete drag and drop : "+error.message);
					event.stopImmediatePropagation();
					this.hideDropFeedback(event);
				}
			}

			private function handleItemClick(event:ListEvent):void{
				previousSelectedItem = this.selectedItem;
				var selectedItem:Category = Category(this.selectedItem.category); 
				var ecce:EditCategoryEvent = new EditCategoryEvent(selectedItem);
				ecce.dispatch();
			}				
				
			]]>
		</mx:Script>
	
</mx:Tree>
